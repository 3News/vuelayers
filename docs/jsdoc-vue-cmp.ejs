<%
/* global _, doclet, children, allDoclets */
let filePath = [doclet.meta.path, doclet.meta.filename].join('/')

const nameToIdent = string => string.replace(/^module:/, '').replace('/', '-').toLowerCase()
const kebabCase = string => _.kebabCase(_.lowerFirst(string))
const camelCase = string => _.camelCase(_.upperFirst(string))
const isPublic = ({undocumented, access}) => !undocumented && (!access || access === 'public')
const alphabetSorter = (a, b) => {
  return a.name.toLowerCase() === b.name.toLowerCase()
    ? 0
    : (
      a.name.toLowerCase() < b.name.toLowerCase()
        ? -1
        : 1
    )
}

doclet.ident = nameToIdent(doclet.name)
doclet.longIdent = nameToIdent(doclet.longname)

let cmpName = 'vld-module-' + doclet.ident + '-doc'
// vue parts
let mixins = doclet.mixes || []
let props = []
let dataProps = []
let compProps = []
let otherMembers = []
let methods = []

children.forEach(child => {
  if (!isPublic(child) || child.memberof !== doclet.longname) {
    return
  }

  switch (true) {
    case child.vueProp:
      props.push(child)
      break
    case child.vueComputedProp:
      compProps.push(child)
      break
    case child.vueDataProp:
      dataProps.push(child)
      break
    case child.kind === 'member' && child.scope === 'instance':
      otherMembers.push(child)
      break
    case child.vueMethod:
      methods.push(child)
      break
  }
})

props.sort(alphabetSorter)
compProps.sort(alphabetSorter)
dataProps.sort(alphabetSorter)
otherMembers.sort(alphabetSorter)
methods.sort(alphabetSorter)

// if current doclet is for an entry index file the find all components of that module
let components = []
if (/components\/[^\/]+\/index\.js$/.test(filePath)) {
  // first paragraph is always should be title
  doclet.description = doclet.description.replace(/^<p[^/]*>.*<\/p>/, '')

  components = children.reduce((all, child) => {
    let cmpDoclet = allDoclets.find(({longname, vueProto}) => {
      return longname === child.longname.replace('.', '/').toLowerCase() && vueProto
    })

    if (!cmpDoclet) return all

    let importVar = camelCase([
      'module',
      nameToIdent(cmpDoclet.longname),
      'doc'
    ].join('-'))

    return all.concat({
      importVar,
      longname: cmpDoclet.longname,
      vueName: cmpDoclet.vueName,
    })
  }, [])
} else {
  // first paragraph is always should be title
  doclet.description = doclet.description.replace(/^<p([^/]*)>(.*)<\/p>(.*)/, '<h3$1>$2</h3>$3')
}

// examples
let examples = (doclet.examples || []).map(function (example) {
  let caption, code, lang = ''
  let match = example.match(/^\s*(?:<caption>)?([^[\]\n\r]+?)?(?:<\/caption>)?(?:\s*\[([\w]*)])?[\n\r]([\s\S]+)$/i)

  if (match) {
    caption = match[1] || ''
    lang = match[2] || ''
    code = match[3] || ''
  }

  return `<vld-code title="${caption}" lang="${lang}">${_.escape(code)}</vld-code>`
})
%>

<template>
  <div id="<%= doclet.longIdent %>" class="content <%= cmpName %>">
    <%= doclet.description %>

    <% examples.forEach(function (example) { %>
      <%= example %>
    <% }) %>

    <% if (mixins.length) { %>
    <b>Mixes in:</b>
    <ul>
      <% mixins.forEach(function (name) { %>
      <li><%= name %></li>
      <% }) %>
    </ul>
    <% } %>

    <% if (props.length || methods.length) { %>
    <b-tabs>
      <% if (props.length) { %>
      <b-tab-item label="Props">
        <b-table :data='<%= JSON.stringify(props) %>' :mobile-cards="true">
          <template scope="scope">
            <b-table-column label="Name">
              <code>{{ scope.row.name }}</code>
            </b-table-column>
            <b-table-column label="Description" v-html="scope.row.description">
            </b-table-column>
            <b-table-column label="Type">
              <span class="type">{{ scope.row.typeExpression }}</span>
            </b-table-column>
            <b-table-column label="Required">
              <b-icon class="checkbox" :type="scope.row.required ? 'is-info' : 'is-light'"
                      :icon="scope.row.required ? 'check-square-o' : 'square-o'"/>
            </b-table-column>
            <b-table-column label="Sync">
              <b-icon class="checkbox" :type="scope.row.vueSync ? 'is-info' : 'is-light'"
                      :icon="scope.row.vueSync ? 'check-square-o' : 'square-o'"/>
            </b-table-column>
            <b-table-column label="Default">
              <code>{{ scope.row.defaultvalue || 'undefined' }}</code>
            </b-table-column>
          </template>
        </b-table>
      </b-tab-item>
      <% } %>

      <% if (otherMembers.length) { %>
      <b-tab-item label="Other members">
        <b-table :data='<%= JSON.stringify(otherMembers) %>' :mobile-cards="true">
          <template scope="scope">
            <b-table-column label="Name">
              <code>{{ scope.row.name }}</code>
            </b-table-column>
            <b-table-column label="Description" v-html="scope.row.description">
            </b-table-column>
            <b-table-column label="Type">
              <span class="type">{{ scope.row.typeExpression }}</span>
            </b-table-column>
          </template>
        </b-table>
      </b-tab-item>
      <% } %>

      <% if (methods.length) { %>
      <b-tab-item label="Methods">
        <b-table :data='<%= JSON.stringify(methods) %>' :mobile-cards="true">
          <template scope="scope">
            <b-table-column label="Name">
              <code>{{ scope.row.name }}</code>
            </b-table-column>
            <b-table-column label="Description" v-html="scope.row.description">
            </b-table-column>
            <b-table-column label="Params">
              TODO: render params list
            </b-table-column>
            <b-table-column label="Returns">
              <p v-for="(ret, i) in scope.row.returns" :key="i">
                <span class="type">{{ ret.typeExpression }}</span>
                <template v-html="ret.description"></template>
              </p>
            </b-table-column>
          </template>
        </b-table>
      </b-tab-item>
      <% } %>
    </b-tabs>
    <% } %>

    <hr>

    <% components.forEach(function ({ importVar }) { %>
    <<%= kebabCase(importVar) %> />
    <% }) %>
  </div>
</template>

<script>
  import Velocity from 'velocity-animate'
  // import all module components with jsdoc-vue-loader
  <% components.forEach(function ({longname, importVar}) { %>
  import <%= importVar %> from '!jsdoc-vue-loader!./jsdoc-index.json?longname=<%= longname %>&+vueProto&tpl=./jsdoc-vue-cmp.ejs'
  <% }) %>

  export default {
    name: '<%= cmpName %>',
    components: {
      <%= _.map(components, 'importVar').join(', ') %>
    },
    computed: {
      doclet () {
        return <%= JSON.stringify(doclet) %>
      },
      childDoclets () {
        return <%= JSON.stringify(children) %>
      },
      mixins () {
        return <%= JSON.stringify(mixins) %>
      },
      props () {
        return <%= JSON.stringify(props) %>
      },
      computedProps () {
        return <%= JSON.stringify(compProps) %>
      },
      dataProps () {
        return <%= JSON.stringify(dataProps) %>
      },
      otherMembers () {
        return <%= JSON.stringify(otherMembers) %>
      },
      methods () {
        return <%= JSON.stringify(methods) %>
      },
    },
    methods: {
      scrollTo (id) {
        let elem = this.$el.querySelector('#' + id)
        if (elem) {
          Velocity(elem, 'scroll', {
            duration: 750,
            easing: 'easeOutCube',
          })
        }
      },
    },
  }
</script>

<style lang="sass">
  @import ./styles/variables

  $light-dark: lighten($dark, 30%)

  .<%= cmpName %>
    .icon.checkbox.is-light
      color: $light-dark !important
    .type
      font-family: monospace
      color: $light-dark
</style>
