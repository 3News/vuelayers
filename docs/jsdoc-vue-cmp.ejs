<%
/* global _, doclet, children, allDoclets */
let filePath = [doclet.meta.path, doclet.meta.filename].join('/')

const nameToIdent = string => string.replace(/^module:/, '').replace('/', '-').toLowerCase()
const kebabCase = string => _.kebabCase(_.lowerFirst(string))
const camelCase = string => _.camelCase(_.upperFirst(string))

doclet.ident = nameToIdent(doclet.name)
doclet.longIdent = nameToIdent(doclet.longname)

let cmpName = 'vld-module-' + doclet.ident + '-doc'
let examples = doclet.examples || []
// if current doclet is for an entry index file the find all components of that module
let components = []
if (/components\/[^\/]+\/index\.js$/.test(filePath)) {
  components = children.reduce((all, child) => {
    let cmpDoclet = allDoclets.find(({longname, vueProto}) => {
      return longname === child.longname.replace('.', '/').toLowerCase() && vueProto
    })

    if (!cmpDoclet) return all

    let importVar = camelCase([
      'module',
      nameToIdent(cmpDoclet.longname),
      'doc'
    ].join('-'))

    return all.concat({
      importVar,
      longname: cmpDoclet.longname,
      vueName: cmpDoclet.vueName,
    })
  }, [])
}

print(JSON.stringify(components))
%>

<template>
  <div :id="id" class="content" :class="$options.name">
    <%= doclet.description %>

    <% examples.forEach(function (example) { %>
      <%= example %>
    <% }) %>

    <b-tabs v-if="props.length || methods.length">
      <b-tab-item v-if="props.length" label="Props">
        <b-table :data="props" :mobile-cards="true">
          <template scope="scope">
            <b-table-column label="Name">
              <code>{{ scope.row.name }}</code>
            </b-table-column>
            <b-table-column label="Description" v-html="scope.row.description">
            </b-table-column>
            <b-table-column label="Type">
              <span class="type">{{ scope.row.typeExpression }}</span>
            </b-table-column>
            <b-table-column label="Required">
              <b-icon class="checkbox" :type="scope.row.required ? 'is-info' : 'is-light'"
                      :icon="scope.row.required ? 'check-square-o' : 'square-o'"/>
            </b-table-column>
            <b-table-column label="Sync">
              <b-icon class="checkbox" :type="scope.row.vueSync ? 'is-info' : 'is-light'"
                      :icon="scope.row.vueSync ? 'check-square-o' : 'square-o'"/>
            </b-table-column>
            <b-table-column label="Default">
              <code>{{ scope.row.defaultvalue || 'undefined' }}</code>
            </b-table-column>
          </template>
        </b-table>
      </b-tab-item>
      <b-tab-item v-if="methods.length" label="Methods">
        <b-table :data="methods" :mobile-cards="true">
          <template scope="scope">
            <b-table-column label="Name">
              <code>{{ scope.row.name }}</code>
            </b-table-column>
            <b-table-column label="Description" v-html="scope.row.description">
            </b-table-column>
            <b-table-column label="Params">
               TODO: render params list
            </b-table-column>
            <b-table-column label="Returns">
              <p v-for="(ret, i) in scope.row.returns" :key="i">
                <span class="type">{{ ret.typeExpression }}</span>
                <template v-html="ret.description"></template>
              </p>
            </b-table-column>
          </template>
        </b-table>
      </b-tab-item>
    </b-tabs>

    <hr/>

    <% components.forEach(function ({ importVar }) { %>
    <<%= kebabCase(importVar) %> />
    <% }) %>
  </div>
</template>

<script>
  import Velocity from 'velocity-animate'
  // import all module components with jsdoc-vue-loader
  <% components.forEach(function ({longname, importVar}) { %>
  import <%= importVar %> from '!jsdoc-vue-loader!./jsdoc-index.json?longname=<%= longname %>&+vueProto&tpl=./jsdoc-vue-cmp.ejs'
  <% }) %>
  // export template variables
  const doclet = <%= JSON.stringify(doclet) %>
  const childDoclets = <%= JSON.stringify(children) %>

  const isPublic = ({undocumented, access}) => !undocumented && (!access || access === 'public')

  export default {
    name: '<%= cmpName %>',
    components: {
      <%= _.map(components, 'importVar').join(', ') %>
    },
    doclet,
    childDoclets,
    computed: {
      id () {
        return this.doclet.longIdent
      },
      doclet () {
        return doclet
      },
      childDoclets () {
        return childDoclets
      },
      props () {
        return childDoclets.filter(d => isPublic(d) && d.vueProp && d.memberof === doclet.longname)
          .sort((a, b) => {
            return a.name.toLowerCase() === b.name.toLowerCase()
              ? 0
              : (
                a.name.toLowerCase() < b.name.toLowerCase()
                  ? -1
                  : 1
              )
          })
      },
      methods () {
        return childDoclets.filter(d => isPublic(d) && d.vueMethod && d.memberof === doclet.longname)
          .sort((a, b) => {
            return a.name.toLowerCase() === b.name.toLowerCase()
              ? 0
              : (
                a.name.toLowerCase() < b.name.toLowerCase()
                  ? -1
                  : 1
              )
          })
      },
    },
    methods: {
      scrollTo (id) {
        let elem = this.$el.querySelector('#' + id)
        if (elem) {
          Velocity(elem, 'scroll', {
            duration: 750,
            easing: 'easeOutCube',
          })
        }
      },
    },
  }
</script>

<style lang="sass">
  @import ./styles/variables

  $light-dark: lighten($dark, 30%)

  .<%= cmpName %>
    .icon.checkbox.is-light
      color: $light-dark !important
    .type
      font-family: monospace
      color: $light-dark
</style>
